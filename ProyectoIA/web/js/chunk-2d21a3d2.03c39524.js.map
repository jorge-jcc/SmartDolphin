{"version":3,"sources":["webpack:///./src/views/Home.vue?19c2","webpack:///src/views/Home.vue","webpack:///./src/views/Home.vue?df15","webpack:///../../../../src/components/VSparkline/helpers/core.ts","webpack:///../../../../src/components/VSparkline/helpers/math.ts","webpack:///../../../../src/components/VSparkline/helpers/path.ts","webpack:///../../../src/components/VSparkline/VSparkline.ts","webpack:///./src/views/Home.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","value","gradient","radius","padding","width","lineCap","gradientDirection","fill","type","autoLineWidth","staticRenderFns","gradients","maxY","totalValues","values","maxValue","Math","minValue","gridX","maxX","gridY","x","minX","index","y","horizonY","height","parseInt","p0","p2","p1","vector","to","from","length","unitVector","start","points","end","next","prev","isCollinear","checkCollinear","point","threshold","getDistance","isTooCloseForRadius","radiusForPoint","before","moveTo","after","mixins","name","inheritAttrs","props","autoDraw","autoDrawDuration","default","autoDrawEasing","color","validator","val","includes","String","labels","labelSize","Number","lineWidth","showLabels","smooth","Boolean","data","lastLength","computed","parsedPadding","parsedWidth","parsedHeight","parsedLabelSize","totalHeight","totalWidth","_lineWidth","totalPadding","parseFloat","boundary","minY","hasLabels","$scopedSlots","parsedLabels","len","i","item","normalizedValues","map","_values","genPoints","textY","_radius","watch","immediate","handler","path","methods","genGradient","stops","offset","id","gradientUnits","x1","y1","x2","y2","genG","style","fontSize","textAnchor","dominantBaseline","genPath","d","stroke","_uid","ref","genLabels","children","genLabel","label","genBars","bars","offsetX","display","viewBox","genClipPath","rounding","rx","ry","attributeName","dur","genTrend","setTextColor","component","VSparkline"],"mappings":"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","file":"js/chunk-2d21a3d2.03c39524.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-sparkline',{attrs:{\"value\":_vm.value,\"gradient\":_vm.gradient,\"smooth\":_vm.radius || false,\"padding\":_vm.padding,\"line-width\":_vm.width,\"stroke-linecap\":_vm.lineCap,\"gradient-direction\":_vm.gradientDirection,\"fill\":_vm.fill,\"type\":_vm.type,\"auto-line-width\":_vm.autoLineWidth,\"auto-draw\":\"\"}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <v-sparkline\n    :value=\"value\"\n    :gradient=\"gradient\"\n    :smooth=\"radius || false\"\n    :padding=\"padding\"\n    :line-width=\"width\"\n    :stroke-linecap=\"lineCap\"\n    :gradient-direction=\"gradientDirection\"\n    :fill=\"fill\"\n    :type=\"type\"\n    :auto-line-width=\"autoLineWidth\"\n    auto-draw\n  ></v-sparkline>\n</template>\n\n<script>\n  const gradients = [\n    ['#222'],\n    ['#42b3f4'],\n    ['violet', 'purple', 'violet'],\n    ['purple', 'violet'],\n    ['#00c6ff', '#F0F', '#FF0'],\n    ['#f72047', '#ffd200', '#1feaea'],\n  ]\n\n  export default {\n    data: () => ({\n      width: 2,\n      radius: 10,\n      padding: 8,\n      lineCap: 'round',\n      gradient: gradients[2],\n      value: [0, 2, 5, 9, 5, 10, 3, 5, 0, 0, 1, 8, 2, 9, 0],\n      gradientDirection: 'top',\n      gradients,\n      fill: false,\n      type: 'trend',\n      autoLineWidth: false,\n    }),\n    mounted() {\n      console.log(\"/\")\n    },\n  }\n</script>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { Point, Boundary, Bar } from '../VSparkline'\n\nexport function genPoints (\n  values: number[],\n  boundary: Boundary\n): Point[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  const maxValue = Math.max(...values)\n  const minValue = Math.min(...values)\n\n  const gridX = (maxX - minX) / (totalValues - 1)\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n\n  return values.map((value, index) => {\n    return {\n      x: minX + index * gridX,\n      y: maxY - (value - minValue) * gridY,\n      value,\n    }\n  })\n}\n\nexport function genBars (\n  values: number[],\n  boundary: Boundary\n): Bar[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  let maxValue = Math.max(...values)\n  let minValue = Math.min(...values)\n\n  if (minValue > 0) minValue = 0\n  if (maxValue < 0) maxValue = 0\n\n  const gridX = maxX / totalValues\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n  const horizonY = maxY - Math.abs(minValue * gridY)\n\n  return values.map((value, index) => {\n    const height = Math.abs(gridY * value)\n\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height +\n        +(value < 0) * height,\n      height,\n      value,\n    }\n  })\n}\n","import { Point } from '../VSparkline'\n\nfunction int (value: string | number): number {\n  return parseInt(value, 10)\n}\n\n/**\n * https://en.wikipedia.org/wiki/Collinearity\n * x=(x1+x2)/2\n * y=(y1+y2)/2\n */\nexport function checkCollinear (p0: Point, p1: Point, p2: Point): boolean {\n  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y)\n}\n\nexport function getDistance (p1: Point, p2: Point): number {\n  return Math.sqrt(\n    Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)\n  )\n}\n\nexport function moveTo (to: Point, from: Point, radius: number) {\n  const vector = { x: to.x - from.x, y: to.y - from.y }\n  const length = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y))\n  const unitVector = { x: vector.x / length, y: vector.y / length }\n\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius,\n  }\n}\n","import { Point } from '../VSparkline'\nimport { checkCollinear, getDistance, moveTo } from './math'\n\n/**\n * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18\n */\nexport function genPath (points: Point[], radius: number, fill = false, height = 75) {\n  const start = points.shift()!\n  const end = points[points.length - 1]\n\n  return (\n    (fill ? `M${start.x} ${height - start.x + 2} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) +\n    points\n      .map((point, index) => {\n        const next = points[index + 1]\n        const prev = points[index - 1] || start\n        const isCollinear = next && checkCollinear(next, point, prev)\n\n        if (!next || isCollinear) {\n          return `L${point.x} ${point.y}`\n        }\n\n        const threshold = Math.min(\n          getDistance(prev, point),\n          getDistance(next, point)\n        )\n        const isTooCloseForRadius = threshold / 2 < radius\n        const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius\n\n        const before = moveTo(prev, point, radiusForPoint)\n        const after = moveTo(next, point, radiusForPoint)\n\n        return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`\n      })\n      .join('') +\n    (fill ? `L${end.x} ${height - start.x + 2} Z` : '')\n  )\n}\n","// Mixins\nimport Colorable from '../../mixins/colorable'\n\n// Utilities\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { genPoints, genBars } from './helpers/core'\nimport { genPath } from './helpers/path'\n\n// Types\nimport Vue, { VNode } from 'vue'\nimport { Prop, PropValidator } from 'vue/types/options'\n\nexport type SparklineItem = number | { value: number }\n\nexport type SparklineText = {\n  x: number\n  value: string\n}\n\nexport interface Boundary {\n  minX: number\n  minY: number\n  maxX: number\n  maxY: number\n}\n\nexport interface Point {\n  x: number\n  y: number\n  value: number\n}\n\nexport interface Bar {\n  x: number\n  y: number\n  height: number\n  value: number\n}\n\ninterface options extends Vue {\n  $refs: {\n    path: SVGPathElement\n  }\n}\n\nexport default mixins<options &\n/* eslint-disable indent */\n  ExtractVue<[\n    typeof Colorable\n  ]>\n/* eslint-enable indent */\n>(\n  Colorable\n).extend({\n  name: 'VSparkline',\n\n  inheritAttrs: false,\n\n  props: {\n    autoDraw: Boolean,\n    autoDrawDuration: {\n      type: Number,\n      default: 2000,\n    },\n    autoDrawEasing: {\n      type: String,\n      default: 'ease',\n    },\n    autoLineWidth: {\n      type: Boolean,\n      default: false,\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n    fill: {\n      type: Boolean,\n      default: false,\n    },\n    gradient: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<string[]>,\n    gradientDirection: {\n      type: String as Prop<'top' | 'bottom' | 'left' | 'right'>,\n      validator: (val: string) => ['top', 'bottom', 'left', 'right'].includes(val),\n      default: 'top',\n    },\n    height: {\n      type: [String, Number],\n      default: 75,\n    },\n    labels: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<SparklineItem[]>,\n    labelSize: {\n      type: [Number, String],\n      default: 7,\n    },\n    lineWidth: {\n      type: [String, Number],\n      default: 4,\n    },\n    padding: {\n      type: [String, Number],\n      default: 8,\n    },\n    showLabels: Boolean,\n    smooth: {\n      type: [Boolean, Number, String],\n      default: false,\n    },\n    type: {\n      type: String as Prop<'trend' | 'bar'>,\n      default: 'trend',\n      validator: (val: string) => ['trend', 'bar'].includes(val),\n    },\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<SparklineItem[]>,\n    width: {\n      type: [Number, String],\n      default: 300,\n    },\n  },\n\n  data: () => ({\n    lastLength: 0,\n  }),\n\n  computed: {\n    parsedPadding (): number {\n      return Number(this.padding)\n    },\n    parsedWidth (): number {\n      return Number(this.width)\n    },\n    parsedHeight (): number {\n      return parseInt(this.height, 10)\n    },\n    parsedLabelSize (): number {\n      return parseInt(this.labelSize, 10) || 7\n    },\n    totalHeight (): number {\n      let height = this.parsedHeight\n\n      if (this.hasLabels) height += parseInt(this.labelSize, 10) * 1.5\n\n      return height\n    },\n    totalWidth (): number {\n      let width = this.parsedWidth\n      if (this.type === 'bar') width = Math.max(this.value.length * this._lineWidth, width)\n\n      return width\n    },\n    totalValues (): number {\n      return this.value.length\n    },\n    _lineWidth (): number {\n      if (this.autoLineWidth && this.type !== 'trend') {\n        const totalPadding = this.parsedPadding * (this.totalValues + 1)\n        return (this.parsedWidth - totalPadding) / this.totalValues\n      } else {\n        return parseFloat(this.lineWidth) || 4\n      }\n    },\n    boundary (): Boundary {\n      if (this.type === 'bar') return { minX: 0, maxX: this.totalWidth, minY: 0, maxY: this.parsedHeight }\n\n      const padding = this.parsedPadding\n\n      return {\n        minX: padding,\n        maxX: this.totalWidth - padding,\n        minY: padding,\n        maxY: this.parsedHeight - padding,\n      }\n    },\n    hasLabels (): boolean {\n      return Boolean(\n        this.showLabels ||\n        this.labels.length > 0 ||\n        this.$scopedSlots.label\n      )\n    },\n    parsedLabels (): SparklineText[] {\n      const labels = []\n      const points = this._values\n      const len = points.length\n\n      for (let i = 0; labels.length < len; i++) {\n        const item = points[i]\n        let value = this.labels[i]\n\n        if (!value) {\n          value = typeof item === 'object'\n            ? item.value\n            : item\n        }\n\n        labels.push({\n          x: item.x,\n          value: String(value),\n        })\n      }\n\n      return labels\n    },\n    normalizedValues (): number[] {\n      return this.value.map(item => (typeof item === 'number' ? item : item.value))\n    },\n    _values (): Point[] | Bar[] {\n      return this.type === 'trend' ? genPoints(this.normalizedValues, this.boundary) : genBars(this.normalizedValues, this.boundary)\n    },\n    textY (): number {\n      let y = this.parsedHeight\n      if (this.type === 'trend') y -= 4\n      return y\n    },\n    _radius (): number {\n      return this.smooth === true ? 8 : Number(this.smooth)\n    },\n  },\n\n  watch: {\n    value: {\n      immediate: true,\n      handler () {\n        this.$nextTick(() => {\n          if (\n            !this.autoDraw ||\n            this.type === 'bar' ||\n            !this.$refs.path\n          ) return\n\n          const path = this.$refs.path\n          const length = path.getTotalLength()\n\n          if (!this.fill) {\n            path.style.transition = 'none'\n            path.style.strokeDasharray = length + ' ' + length\n            path.style.strokeDashoffset = Math.abs(length - (this.lastLength || 0)).toString()\n            path.getBoundingClientRect()\n            path.style.transition = `stroke-dashoffset ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\n            path.style.strokeDashoffset = '0'\n          } else {\n            path.style.transformOrigin = 'bottom center'\n            path.style.transition = 'none'\n            path.style.transform = `scaleY(0)`\n            path.getBoundingClientRect()\n            path.style.transition = `transform ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\n            path.style.transform = `scaleY(1)`\n          }\n          this.lastLength = length\n        })\n      },\n    },\n  },\n\n  methods: {\n    genGradient () {\n      const gradientDirection = this.gradientDirection\n      const gradient = this.gradient.slice()\n\n      // Pushes empty string to force\n      // a fallback to currentColor\n      if (!gradient.length) gradient.push('')\n\n      const len = Math.max(gradient.length - 1, 1)\n      const stops = gradient.reverse().map((color, index) =>\n        this.$createElement('stop', {\n          attrs: {\n            offset: index / len,\n            'stop-color': color || 'currentColor',\n          },\n        })\n      )\n\n      return this.$createElement('defs', [\n        this.$createElement('linearGradient', {\n          attrs: {\n            id: this._uid,\n            gradientUnits: 'userSpaceOnUse',\n            x1: gradientDirection === 'left' ? '100%' : '0',\n            y1: gradientDirection === 'top' ? '100%' : '0',\n            x2: gradientDirection === 'right' ? '100%' : '0',\n            y2: gradientDirection === 'bottom' ? '100%' : '0',\n          },\n        }, stops),\n      ])\n    },\n    genG (children: VNode[]) {\n      return this.$createElement('g', {\n        style: {\n          fontSize: '8',\n          textAnchor: 'middle',\n          dominantBaseline: 'mathematical',\n          fill: 'currentColor',\n        } as object, // TODO: TS 3.5 is too eager with the array type here\n      }, children)\n    },\n    genPath () {\n      const points = genPoints(this.normalizedValues, this.boundary)\n\n      return this.$createElement('path', {\n        attrs: {\n          d: genPath(points, this._radius, this.fill, this.parsedHeight),\n          fill: this.fill ? `url(#${this._uid})` : 'none',\n          stroke: this.fill ? 'none' : `url(#${this._uid})`,\n        },\n        ref: 'path',\n      })\n    },\n    genLabels (offsetX: number) {\n      const children = this.parsedLabels.map((item, i) => (\n        this.$createElement('text', {\n          attrs: {\n            x: item.x + offsetX + this._lineWidth / 2,\n            y: this.textY + (this.parsedLabelSize * 0.75),\n            'font-size': Number(this.labelSize) || 7,\n          },\n        }, [this.genLabel(item, i)])\n      ))\n\n      return this.genG(children)\n    },\n    genLabel (item: SparklineText, index: number) {\n      return this.$scopedSlots.label\n        ? this.$scopedSlots.label({ index, value: item.value })\n        : item.value\n    },\n    genBars () {\n      if (!this.value || this.totalValues < 2) return undefined as never\n\n      const bars = genBars(this.normalizedValues, this.boundary)\n      const offsetX = (Math.abs(bars[0].x - bars[1].x) - this._lineWidth) / 2\n\n      return this.$createElement('svg', {\n        attrs: {\n          display: 'block',\n          viewBox: `0 0 ${this.totalWidth} ${this.totalHeight}`,\n        },\n      }, [\n        this.genGradient(),\n        this.genClipPath(bars, offsetX, this._lineWidth, 'sparkline-bar-' + this._uid),\n        this.hasLabels ? this.genLabels(offsetX) : undefined as never,\n        this.$createElement('g', {\n          attrs: {\n            'clip-path': `url(#sparkline-bar-${this._uid}-clip)`,\n            fill: `url(#${this._uid})`,\n          },\n        }, [\n          this.$createElement('rect', {\n            attrs: {\n              x: 0,\n              y: 0,\n              width: this.totalWidth,\n              height: this.height,\n            },\n          }),\n        ]),\n      ])\n    },\n    genClipPath (bars: Bar[], offsetX: number, lineWidth: number, id: string) {\n      const rounding = typeof this.smooth === 'number'\n        ? this.smooth\n        : this.smooth ? 2 : 0\n\n      return this.$createElement('clipPath', {\n        attrs: {\n          id: `${id}-clip`,\n        },\n      }, bars.map(item => {\n        return this.$createElement('rect', {\n          attrs: {\n            x: item.x + offsetX,\n            y: item.y,\n            width: lineWidth,\n            height: item.height,\n            rx: rounding,\n            ry: rounding,\n          },\n        }, [\n          this.autoDraw ? this.$createElement('animate', {\n            attrs: {\n              attributeName: 'height',\n              from: 0,\n              to: item.height,\n              dur: `${this.autoDrawDuration}ms`,\n              fill: 'freeze',\n            },\n          }) : undefined as never,\n        ])\n      }))\n    },\n    genTrend () {\n      return this.$createElement('svg', this.setTextColor(this.color, {\n        attrs: {\n          ...this.$attrs,\n          display: 'block',\n          'stroke-width': this._lineWidth || 1,\n          viewBox: `0 0 ${this.width} ${this.totalHeight}`,\n        },\n      }), [\n        this.genGradient(),\n        this.hasLabels && this.genLabels(-(this._lineWidth / 2)),\n        this.genPath(),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    if (this.totalValues < 2) return undefined as never\n\n    return this.type === 'trend' ? this.genTrend() : this.genBars()\n  },\n})\n","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=7b24e361&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VSparkline } from 'vuetify/lib/components/VSparkline';\ninstallComponents(component, {VSparkline})\n"],"sourceRoot":""}